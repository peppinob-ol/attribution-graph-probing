name: Semantic Versioning and Release Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

# Add permissions to allow pushing tags and creating releases
permissions:
  contents: write

jobs:
  version:
    name: Semantic Versioning and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest version from tags
        id: get_version
        run: |
          # Get the latest tag or default to v1.0.0 if none exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          # Remove 'v' prefix
          VERSION=${LATEST_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine release type
        id: release_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use the manually selected release type
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Default to patch for automatic releases on push to main
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump_version
        env:
          RELEASE_TYPE: ${{ steps.release_type.outputs.type }}
          CURRENT_VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          if [ "$RELEASE_TYPE" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$RELEASE_TYPE" == "minor" ]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else # patch
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push origin "v${{ steps.bump_version.outputs.new_version }}"

      - name: Generate release notes with commits
        run: |
          # Get the previous tag or go back to the beginning if no tags exist
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo $(git rev-list --max-parents=0 HEAD))

          # Generate release notes directly to a file
          echo "## Commits in this release" > release_notes.md
          git log ${PREV_TAG}..HEAD --pretty=format:"* %h - %s (%an)" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
