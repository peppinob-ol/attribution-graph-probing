'use client';

import ActivationSingleForm from '@/components/activation-single-form';
import ActivationsList from '@/components/activations-list';
import { useGlobalContext } from '@/components/provider/global-provider';
import { Card } from '@/components/shadcn/card';
import * as Dialog from '@radix-ui/react-dialog';
import * as RadioGroup from '@radix-ui/react-radio-group';
import { ShipWheel } from 'lucide-react';
import { useEffect, useRef, useState } from 'react';
import { animalNeuron, badStoryNeuron, liesNeuron, typoNeuron } from './analyze-features';
import FeatureTooltip from './feature-tooltip';
import QuizNeuron from './quiz-neuron';
import DeepDiveTooltip from './tooltip-deepdive';
import WarningTooltip from './tooltip-warning';

export default function TabAnalyze({
  tabUpdater,
  completedTabsAdd,
}: {
  tabUpdater: (tab: string) => void;
  completedTabsAdd: (tab: string) => void;
}) {
  const [forceVerify, setForceVerify] = useState(false);
  const { setFeatureModalFeature, setFeatureModalOpen } = useGlobalContext();
  const [forceExtraCredit, setForceExtraCredit] = useState(false);
  const [wrongModalOpen, setWrongModalOpen] = useState(false);
  const [quizValue, setQuizValue] = useState<string | undefined>(undefined);

  function isCorrectishAnswer(answer: string) {
    return answer === 'animals' || answer === 'none';
  }

  function hasCorrectishAnswer() {
    return isCorrectishAnswer(quizValue || 'wronganswer');
  }

  const ref = useRef<HTMLDivElement>(null);
  useEffect(() => {
    if (ref.current) {
      ref.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, []);

  return (
    <div className="mt-0 flex w-full max-w-screen-xl flex-col items-center justify-center pb-24 pt-1">
      <div ref={ref} className="pt-20 sm:pt-0" />
      <Dialog.Root
        defaultOpen={false}
        open={wrongModalOpen}
        onOpenChange={(v) => {
          setWrongModalOpen(v);
        }}
      >
        <Dialog.Portal>
          <Dialog.Overlay className="fixed inset-0 bg-slate-800/20" />
          <Dialog.Content className="fixed left-[50%] top-[50%] max-h-[85vh] w-[90vw] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-lg bg-white p-[25px] shadow focus:outline-none">
            <Dialog.Description className="mb-5 mt-[0px] w-full text-center text-sm leading-normal text-slate-700">
              Hmm, {`that's`} not quite right.
              <br />
              <br />
              What do these activations (in green) have in common?
            </Dialog.Description>
            <div className="mt-4 flex items-center justify-center">
              <Dialog.Close asChild>
                <button
                  type="button"
                  className="bord items-center justify-center rounded-full bg-slate-200 px-[15px] py-2 text-xs font-medium leading-none text-slate-600 shadow hover:bg-slate-100 focus:outline-none"
                >
                  Try Again
                </button>
              </Dialog.Close>
            </div>
          </Dialog.Content>
        </Dialog.Portal>
      </Dialog.Root>

      <div className="mb-10 mt-5 flex w-full flex-row items-center justify-start px-2 sm:mb-5 sm:px-5">
        <div className="flex w-full flex-col items-start justify-start gap-x-4 gap-y-1.5 rounded px-2 py-1 sm:flex-row">
          <div className="flex w-[105px] min-w-[105px] max-w-[105px] flex-row items-center gap-x-2 sm:flex-col">
            <span className="w-[105px] min-w-[105px] max-w-[105px] whitespace-nowrap rounded-full bg-slate-100 px-3 py-1 text-center text-[10px] font-bold uppercase text-slate-600">
              üí° Purpose
            </span>
          </div>
          <div className="text-sm font-medium leading-normal text-slate-500">
            The <FeatureTooltip /> in Gemma Scope have labels like {`"references to London"`}. These labels are
            generated by asking another, larger AI to look for{' '}
            <strong>patterns in the texts that a feature activates most strongly on - {`its "Top Activations"`}</strong>
            .<br />
            In this demo,{' '}
            {`you'll try the job of the larger AI yourself - by looking at a feature's Top Activations, and labeling that feature using the patterns found in the Top Activations.`}
          </div>
        </div>
      </div>
      <div className="mb-10 flex w-full flex-row items-center justify-start px-2 sm:mb-6 sm:px-5">
        <div className="flex w-full flex-col items-start justify-start gap-x-4 gap-y-1.5 rounded px-2 py-1 sm:flex-row">
          <div className="mb-2 flex w-full flex-row items-center justify-between gap-x-2 sm:mb-0 sm:w-auto sm:flex-col sm:justify-start">
            <span className="w-[105px] min-w-[105px] max-w-[105px] whitespace-nowrap rounded-full bg-slate-100 px-0 py-1 text-center text-[10px] font-bold uppercase text-slate-600">
              üé® Demo
            </span>
            <div className="flex flex-row gap-x-1.5 sm:flex-auto sm:flex-col">
              <WarningTooltip>
                <div className="font-medium text-slate-600">
                  Using AI to label features is an approach that is far from perfect. Often times, even advanced models
                  like GPT4o-mini fail to detect patterns that humans would easily find.
                  <br />
                  <br />
                  This, like many other areas of interpretability, is an open field of research.
                </div>
              </WarningTooltip>
              <DeepDiveTooltip>
                <div className="font-medium text-slate-600">
                  <div className="text-center">Technical Deep Dive</div>
                  <br />
                  This approach to labeling features is called auto-interp (
                  <a
                    href="https://openaipublic.blob.core.windows.net/neuron-explainer/paper/index.html"
                    target="_blank"
                    className="text-gGreen underline"
                    rel="noreferrer"
                  >
                    Bills, et al
                  </a>
                  ).
                  <br />
                  <br />
                  For the Gemma Scope features, we used{' '}
                  <strong>
                    <code>GPT4o-mini</code>
                  </strong>{' '}
                  to perform auto-interp, asking it to look at the top 10 activation texts for each feature.
                </div>
              </DeepDiveTooltip>
            </div>
          </div>
          <div className="flex w-full flex-col">
            <div className="mb-1.5 text-sm font-medium text-slate-500">
              We want to label <code>FEATURE_X</code>. After sending Gemma thousands of texts, these are{' '}
              <code>FEATURE_X</code>
              {`'`}s Top Activations:
            </div>
            <div className="mb-5 max-w-[500px]">
              <Card className="overflow-hidden">
                <ActivationsList
                  feature={animalNeuron}
                  defaultRange={0}
                  showTopActivationToken={false}
                  defaultShowLineBreaks={false}
                  showControls={false}
                  showTest={false}
                  showDatasource={false}
                  activations={animalNeuron?.activations}
                  activationItemClassName="py-2"
                />
              </Card>
            </div>
            <div className="text-sm font-medium text-slate-500">
              What would you label <code>FEATURE_X</code>?
            </div>
            <div className="mt-2 flex w-full items-center justify-center">
              <RadioGroup.Root
                className="flex w-full flex-1 flex-col gap-x-3 gap-y-1.5 px-0 py-0 sm:flex-row"
                defaultValue={quizValue}
                value={quizValue}
                onValueChange={(value) => {
                  setQuizValue(value);
                  if (isCorrectishAnswer(value)) {
                    completedTabsAdd('analyze');
                  } else {
                    setWrongModalOpen(true);
                  }
                }}
                aria-label="Selections of answers"
              >
                <RadioGroup.Item
                  className="flex-1 items-center rounded-full border border-gYellow px-1 py-2.5 text-[12px] font-medium text-slate-600 shadow transition-all hover:bg-gYellow/20 data-[state=checked]:bg-gYellow data-[state=checked]:text-white sm:px-4 sm:py-2.5 sm:text-[12px]"
                  value="sports"
                  aria-label="sports"
                >
                  üèãÔ∏è Olympic sports
                </RadioGroup.Item>
                <RadioGroup.Item
                  className="flex-1 items-center rounded-full border border-gBlue px-1 py-2.5 text-[12px] font-medium text-slate-600 shadow transition-all hover:bg-gBlue/20 data-[state=checked]:bg-gBlue data-[state=checked]:text-white sm:px-4 sm:py-2.5 sm:text-[12px]"
                  value="cities"
                  aria-label="cities"
                >
                  üåÜ famous cities
                </RadioGroup.Item>
                <RadioGroup.Item
                  className="flex-1 flex-row items-center whitespace-nowrap rounded-full border border-gRed px-1 py-3 text-[12px] font-medium text-slate-600 shadow transition-all hover:bg-gRed/20 data-[state=checked]:bg-gRed data-[state=checked]:text-white sm:px-0 sm:py-2.5 sm:text-[12px]"
                  value="animals"
                  aria-label="animals"
                >
                  <div className="flex w-full flex-row items-center justify-center gap-x-1.5 leading-none">
                    üê∂ references to animals{' '}
                    {quizValue === 'animals' && <div className="ml-1.5 text-[16px] leading-none">‚≠êÔ∏è</div>}
                  </div>
                </RadioGroup.Item>
                <RadioGroup.Item
                  className="flex-1 flex-row items-center whitespace-nowrap rounded-full border border-gGreen px-1 py-3 text-[12px] font-medium text-slate-600 shadow transition-all hover:bg-gGreen/20 data-[state=checked]:bg-gGreen data-[state=checked]:text-white sm:px-0 sm:py-2.5 sm:text-[12px]"
                  value="none"
                  aria-label="none"
                >
                  <div className="flex w-full flex-row items-center justify-center gap-x-1.5 leading-none">
                    ‚ùå none of these{' '}
                    {quizValue === 'none' && <div className="ml-1.5 text-[16px] leading-none">‚≠êÔ∏è</div>}
                  </div>
                </RadioGroup.Item>
              </RadioGroup.Root>
            </div>
          </div>
        </div>
      </div>

      <div
        className={`mb-10 flex w-full flex-row items-center justify-start px-2 sm:mb-5 sm:px-5 ${
          !hasCorrectishAnswer() && !forceVerify ? 'opacity-40' : ''
        }`}
      >
        <div className="flex w-full flex-col items-start justify-start gap-x-4 gap-y-1.5 rounded px-2 py-1 sm:flex-row">
          <div className="mb-2 flex w-full flex-row items-center justify-between gap-x-2 sm:mb-0 sm:w-auto sm:flex-col sm:justify-start">
            <span className="w-[105px] min-w-[105px] max-w-[105px] whitespace-nowrap rounded-full bg-slate-100 px-0 py-1 text-center text-[10px] font-bold uppercase text-slate-600">
              ‚ö°Ô∏è Analyze
            </span>
            <div
              className={`${
                !hasCorrectishAnswer() && !forceVerify ? 'hidden' : 'flex flex-row gap-x-1.5 sm:flex-auto sm:flex-col'
              }`}
            >
              <WarningTooltip>
                <div className="font-medium text-slate-600">
                  The trickiness here is a great example of an unsolved problem in interpretability. Even after testing
                  this feature, {`it's `} still undetermined where the {`"bounds"`} of this feature begins and ends.
                  <br />
                  <br />
                  For example, what if it was all animals except squirrels? Or what if {`there's`} some subtle yet
                  important rule about this feature, like it {`doesn't`} activate in certain languages?
                </div>
              </WarningTooltip>
            </div>
          </div>
          <div className="flex w-full flex-col items-start justify-start">
            {!hasCorrectishAnswer() && !forceVerify ? (
              <div className="flex flex-row items-center justify-center text-sm font-medium text-slate-400">
                Unlocked after doing the example, or{' '}
                <button
                  type="button"
                  onClick={() => setForceVerify(true)}
                  className="ml-1 px-0 py-0 font-medium leading-none text-slate-400 underline hover:bg-slate-300"
                >
                  skip example
                </button>
                .
              </div>
            ) : (
              <div className="flex w-full flex-col items-start justify-start text-sm font-medium text-slate-500">
                <div className="mb-0 text-sm leading-normal">
                  Nice! This was tricky, because there are two possibly correct answers. With the given Top Activations,{' '}
                  {`it's possible that this feature is ONLY about animals, or something broader, like "living things".`}
                  <br />
                  <br />
                  Fortunately, we can check! We can single out and test <code>FEATURE_X</code> manually, with custom
                  text. See if you can write a text snippet that activates <code>FEATURE_X</code> and lets you deduce
                  what this feature is about.
                </div>
                <div className="w-full min-w-[300px] max-w-[500px]">
                  <ActivationSingleForm
                    neuron={animalNeuron}
                    overallMaxValue={50}
                    enterSubmits
                    hideBos
                    formValue=""
                    placeholder={`Test FEATURE_X with custom text.\nCan you write a text snippet that activates it?`}
                    callback={() => {
                      setForceExtraCredit(true);
                    }}
                    hideSteer
                  />
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      <div
        className={`mb-10 flex w-full flex-row items-center justify-start px-2 sm:mb-6 sm:px-5 ${
          !forceExtraCredit ? 'opacity-40' : ''
        }`}
      >
        <div className="flex w-full flex-col items-start justify-start gap-x-4 gap-y-1.5 rounded px-2 py-1 sm:flex-row">
          <span className="w-[105px] min-w-[105px] max-w-[105px] whitespace-nowrap rounded-full bg-slate-100 px-3 py-1 text-center text-[10px] font-bold uppercase text-slate-600">
            üß© Puzzles
          </span>
          {!forceExtraCredit ? (
            <div className="flex flex-row items-center justify-center text-sm font-medium text-slate-400">
              Unlocked after analyze, or{' '}
              <button
                type="button"
                onClick={() => setForceExtraCredit(true)}
                className="ml-1 px-0 py-0 font-medium leading-none text-slate-400 underline hover:bg-slate-300"
              >
                skip analyze
              </button>
              .
            </div>
          ) : (
            <div className="flex w-full flex-col items-start justify-start text-sm font-medium text-slate-500">
              <div className="mb-6 text-sm sm:mb-4">
                Nice. Now, can you guess what each of these features are about?
              </div>
              <div className="flex w-full flex-col items-start gap-x-3 gap-y-8 sm:flex-row">
                <QuizNeuron
                  name="FEATURE_EASY"
                  neuron={liesNeuron}
                  answer="Lies and falsehoods"
                  setFeatureModalFeature={setFeatureModalFeature}
                  setFeatureModalOpen={setFeatureModalOpen}
                />
                <QuizNeuron
                  name="FEATURE_MEDIUM"
                  neuron={typoNeuron}
                  answer="Misspellings or typos"
                  setFeatureModalFeature={setFeatureModalFeature}
                  setFeatureModalOpen={setFeatureModalOpen}
                />
                <QuizNeuron
                  name="FEATURE_HARD"
                  neuron={badStoryNeuron}
                  answer="Bad/cringe stories"
                  setFeatureModalFeature={setFeatureModalFeature}
                  setFeatureModalOpen={setFeatureModalOpen}
                />
              </div>
            </div>
          )}
        </div>
      </div>

      <div
        className={`mb-5 flex w-full flex-row items-center justify-start px-2 sm:px-5 ${
          !forceExtraCredit ? 'opacity-40' : ''
        }`}
      >
        <div className="flex w-full flex-col items-start justify-start gap-x-4 gap-y-1.5 rounded px-2 py-1 sm:flex-row">
          <span className="w-[105px] min-w-[105px] max-w-[105px] whitespace-nowrap rounded-full bg-slate-100 px-3 py-1 text-center text-[10px] font-bold uppercase text-slate-600">
            üéÅ Next
          </span>
          {!forceExtraCredit ? (
            <div className="flex flex-row items-center justify-center text-sm font-medium text-slate-400">
              Unlocked after analyze, or{' '}
              <button
                type="button"
                onClick={() => setForceExtraCredit(true)}
                className="ml-1 px-0 py-0 font-medium leading-none text-slate-400 underline hover:bg-slate-300"
              >
                skip analyze
              </button>
              .
            </div>
          ) : (
            <div className="flex w-full flex-col items-start justify-start text-sm font-medium text-slate-500">
              <div className="mb-3 text-sm leading-normal">
                So far, {`we've`} been poking and observing {`Gemma's`} features to see {`what it's thinking`}. But now
                the real fun begins - we can actually <strong>change {`Gemma's`} behavior</strong> by amplifying the
                features we identified.{' '}
              </div>
              <button
                type="button"
                onClick={() => {
                  tabUpdater('steer');
                }}
                className="flex min-w-[160px] cursor-pointer flex-row gap-x-2 rounded-full border border-gRed bg-white px-5 py-2.5 text-sm font-medium text-slate-600 shadow transition-all hover:scale-105 hover:bg-gRed/20"
              >
                <ShipWheel className="h-5 w-5 text-gRed" /> Next - Steer Gemma
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
