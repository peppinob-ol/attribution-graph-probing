/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - AutoInterp Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExplainDefaultPost200Response,
  ExplainDefaultPostRequest,
  ScoreEmbeddingPost200Response,
  ScoreEmbeddingPostRequest,
  ScoreFuzzDetectionPost200Response,
  ScoreFuzzDetectionPostRequest,
} from '../models/index';
import {
    ExplainDefaultPost200ResponseFromJSON,
    ExplainDefaultPost200ResponseToJSON,
    ExplainDefaultPostRequestFromJSON,
    ExplainDefaultPostRequestToJSON,
    ScoreEmbeddingPost200ResponseFromJSON,
    ScoreEmbeddingPost200ResponseToJSON,
    ScoreEmbeddingPostRequestFromJSON,
    ScoreEmbeddingPostRequestToJSON,
    ScoreFuzzDetectionPost200ResponseFromJSON,
    ScoreFuzzDetectionPost200ResponseToJSON,
    ScoreFuzzDetectionPostRequestFromJSON,
    ScoreFuzzDetectionPostRequestToJSON,
} from '../models/index';

export interface ExplainDefaultPostOperationRequest {
    explainDefaultPostRequest: ExplainDefaultPostRequest;
}

export interface ScoreEmbeddingPostOperationRequest {
    scoreEmbeddingPostRequest: ScoreEmbeddingPostRequest;
}

export interface ScoreFuzzDetectionPostOperationRequest {
    scoreFuzzDetectionPostRequest: ScoreFuzzDetectionPostRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Generate an explanation for neuron/feature behavior using the default explainer
     */
    async explainDefaultPostRaw(requestParameters: ExplainDefaultPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExplainDefaultPost200Response>> {
        if (requestParameters['explainDefaultPostRequest'] == null) {
            throw new runtime.RequiredError(
                'explainDefaultPostRequest',
                'Required parameter "explainDefaultPostRequest" was null or undefined when calling explainDefaultPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/explain/default`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExplainDefaultPostRequestToJSON(requestParameters['explainDefaultPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExplainDefaultPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Generate an explanation for neuron/feature behavior using the default explainer
     */
    async explainDefaultPost(requestParameters: ExplainDefaultPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExplainDefaultPost200Response> {
        const response = await this.explainDefaultPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Score an explanation using embedding similarity, using the dunzhang/stella_en_400M_v5 model.
     */
    async scoreEmbeddingPostRaw(requestParameters: ScoreEmbeddingPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScoreEmbeddingPost200Response>> {
        if (requestParameters['scoreEmbeddingPostRequest'] == null) {
            throw new runtime.RequiredError(
                'scoreEmbeddingPostRequest',
                'Required parameter "scoreEmbeddingPostRequest" was null or undefined when calling scoreEmbeddingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/score/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScoreEmbeddingPostRequestToJSON(requestParameters['scoreEmbeddingPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreEmbeddingPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Score an explanation using embedding similarity, using the dunzhang/stella_en_400M_v5 model.
     */
    async scoreEmbeddingPost(requestParameters: ScoreEmbeddingPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScoreEmbeddingPost200Response> {
        const response = await this.scoreEmbeddingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Score an explanation using fuzzing or detection methods
     */
    async scoreFuzzDetectionPostRaw(requestParameters: ScoreFuzzDetectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScoreFuzzDetectionPost200Response>> {
        if (requestParameters['scoreFuzzDetectionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'scoreFuzzDetectionPostRequest',
                'Required parameter "scoreFuzzDetectionPostRequest" was null or undefined when calling scoreFuzzDetectionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/score/fuzz-detection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScoreFuzzDetectionPostRequestToJSON(requestParameters['scoreFuzzDetectionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreFuzzDetectionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Score an explanation using fuzzing or detection methods
     */
    async scoreFuzzDetectionPost(requestParameters: ScoreFuzzDetectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScoreFuzzDetectionPost200Response> {
        const response = await this.scoreFuzzDetectionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
