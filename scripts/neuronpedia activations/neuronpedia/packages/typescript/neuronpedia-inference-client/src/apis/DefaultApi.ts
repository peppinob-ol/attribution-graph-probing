/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivationAllPost200Response,
  ActivationAllPostRequest,
  ActivationSinglePost200Response,
  ActivationSinglePostRequest,
  ActivationTopkByTokenPost200Response,
  ActivationTopkByTokenPostRequest,
  SteerCompletionChatPost200Response,
  SteerCompletionChatPostRequest,
  SteerCompletionPost200Response,
  SteerCompletionRequest,
  TokenizePost200Response,
  TokenizePostRequest,
  UtilSaeTopkByDecoderCossimPost200Response,
  UtilSaeTopkByDecoderCossimPostRequest,
  UtilSaeVectorPost200Response,
  UtilSaeVectorPostRequest,
} from '../models/index';
import {
    ActivationAllPost200ResponseFromJSON,
    ActivationAllPost200ResponseToJSON,
    ActivationAllPostRequestFromJSON,
    ActivationAllPostRequestToJSON,
    ActivationSinglePost200ResponseFromJSON,
    ActivationSinglePost200ResponseToJSON,
    ActivationSinglePostRequestFromJSON,
    ActivationSinglePostRequestToJSON,
    ActivationTopkByTokenPost200ResponseFromJSON,
    ActivationTopkByTokenPost200ResponseToJSON,
    ActivationTopkByTokenPostRequestFromJSON,
    ActivationTopkByTokenPostRequestToJSON,
    SteerCompletionChatPost200ResponseFromJSON,
    SteerCompletionChatPost200ResponseToJSON,
    SteerCompletionChatPostRequestFromJSON,
    SteerCompletionChatPostRequestToJSON,
    SteerCompletionPost200ResponseFromJSON,
    SteerCompletionPost200ResponseToJSON,
    SteerCompletionRequestFromJSON,
    SteerCompletionRequestToJSON,
    TokenizePost200ResponseFromJSON,
    TokenizePost200ResponseToJSON,
    TokenizePostRequestFromJSON,
    TokenizePostRequestToJSON,
    UtilSaeTopkByDecoderCossimPost200ResponseFromJSON,
    UtilSaeTopkByDecoderCossimPost200ResponseToJSON,
    UtilSaeTopkByDecoderCossimPostRequestFromJSON,
    UtilSaeTopkByDecoderCossimPostRequestToJSON,
    UtilSaeVectorPost200ResponseFromJSON,
    UtilSaeVectorPost200ResponseToJSON,
    UtilSaeVectorPostRequestFromJSON,
    UtilSaeVectorPostRequestToJSON,
} from '../models/index';

export interface ActivationAllPostOperationRequest {
    activationAllPostRequest: ActivationAllPostRequest;
}

export interface ActivationSinglePostOperationRequest {
    activationSinglePostRequest: ActivationSinglePostRequest;
}

export interface ActivationTopkByTokenPostOperationRequest {
    activationTopkByTokenPostRequest: ActivationTopkByTokenPostRequest;
}

export interface SteerCompletionChatPostOperationRequest {
    steerCompletionChatPostRequest: SteerCompletionChatPostRequest;
}

export interface SteerCompletionPostRequest {
    steerCompletionRequest: SteerCompletionRequest;
}

export interface TokenizePostOperationRequest {
    tokenizePostRequest: TokenizePostRequest;
}

export interface UtilSaeTopkByDecoderCossimPostOperationRequest {
    utilSaeTopkByDecoderCossimPostRequest: UtilSaeTopkByDecoderCossimPostRequest;
}

export interface UtilSaeVectorPostOperationRequest {
    utilSaeVectorPostRequest: UtilSaeVectorPostRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * For a given prompt, get the top activating features for a set of SAEs (eg gemmascope-res-65k), or specific SAEs in the set of SAEs (eg 0-gemmascope-res-65k, 5-gemmascope-res-65k). Also has other customization options.
     */
    async activationAllPostRaw(requestParameters: ActivationAllPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivationAllPost200Response>> {
        if (requestParameters['activationAllPostRequest'] == null) {
            throw new runtime.RequiredError(
                'activationAllPostRequest',
                'Required parameter "activationAllPostRequest" was null or undefined when calling activationAllPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/activation/all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivationAllPostRequestToJSON(requestParameters['activationAllPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivationAllPost200ResponseFromJSON(jsonValue));
    }

    /**
     * For a given prompt, get the top activating features for a set of SAEs (eg gemmascope-res-65k), or specific SAEs in the set of SAEs (eg 0-gemmascope-res-65k, 5-gemmascope-res-65k). Also has other customization options.
     */
    async activationAllPost(requestParameters: ActivationAllPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivationAllPost200Response> {
        const response = await this.activationAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Given a text prompt, returns the activation values for a single SAE latent or custom vector+hook.
     */
    async activationSinglePostRaw(requestParameters: ActivationSinglePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivationSinglePost200Response>> {
        if (requestParameters['activationSinglePostRequest'] == null) {
            throw new runtime.RequiredError(
                'activationSinglePostRequest',
                'Required parameter "activationSinglePostRequest" was null or undefined when calling activationSinglePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/activation/single`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivationSinglePostRequestToJSON(requestParameters['activationSinglePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivationSinglePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Given a text prompt, returns the activation values for a single SAE latent or custom vector+hook.
     */
    async activationSinglePost(requestParameters: ActivationSinglePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivationSinglePost200Response> {
        const response = await this.activationSinglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For a given prompt, get the top activating features at each token position for a single SAE.
     */
    async activationTopkByTokenPostRaw(requestParameters: ActivationTopkByTokenPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivationTopkByTokenPost200Response>> {
        if (requestParameters['activationTopkByTokenPostRequest'] == null) {
            throw new runtime.RequiredError(
                'activationTopkByTokenPostRequest',
                'Required parameter "activationTopkByTokenPostRequest" was null or undefined when calling activationTopkByTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/activation/topk-by-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivationTopkByTokenPostRequestToJSON(requestParameters['activationTopkByTokenPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivationTopkByTokenPost200ResponseFromJSON(jsonValue));
    }

    /**
     * For a given prompt, get the top activating features at each token position for a single SAE.
     */
    async activationTopkByTokenPost(requestParameters: ActivationTopkByTokenPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivationTopkByTokenPost200Response> {
        const response = await this.activationTopkByTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For a given prompt, complete it by steering with the given feature or vector
     */
    async steerCompletionChatPostRaw(requestParameters: SteerCompletionChatPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SteerCompletionChatPost200Response>> {
        if (requestParameters['steerCompletionChatPostRequest'] == null) {
            throw new runtime.RequiredError(
                'steerCompletionChatPostRequest',
                'Required parameter "steerCompletionChatPostRequest" was null or undefined when calling steerCompletionChatPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/steer/completion-chat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SteerCompletionChatPostRequestToJSON(requestParameters['steerCompletionChatPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SteerCompletionChatPost200ResponseFromJSON(jsonValue));
    }

    /**
     * For a given prompt, complete it by steering with the given feature or vector
     */
    async steerCompletionChatPost(requestParameters: SteerCompletionChatPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SteerCompletionChatPost200Response> {
        const response = await this.steerCompletionChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For a given prompt, complete it by steering with the given feature or vector
     */
    async steerCompletionPostRaw(requestParameters: SteerCompletionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SteerCompletionPost200Response>> {
        if (requestParameters['steerCompletionRequest'] == null) {
            throw new runtime.RequiredError(
                'steerCompletionRequest',
                'Required parameter "steerCompletionRequest" was null or undefined when calling steerCompletionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/steer/completion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SteerCompletionRequestToJSON(requestParameters['steerCompletionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SteerCompletionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * For a given prompt, complete it by steering with the given feature or vector
     */
    async steerCompletionPost(requestParameters: SteerCompletionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SteerCompletionPost200Response> {
        const response = await this.steerCompletionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Tokenize input text for a given model
     */
    async tokenizePostRaw(requestParameters: TokenizePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenizePost200Response>> {
        if (requestParameters['tokenizePostRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenizePostRequest',
                'Required parameter "tokenizePostRequest" was null or undefined when calling tokenizePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/tokenize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenizePostRequestToJSON(requestParameters['tokenizePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenizePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Tokenize input text for a given model
     */
    async tokenizePost(requestParameters: TokenizePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenizePost200Response> {
        const response = await this.tokenizePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Given a specific vector or SAE feature, return the top features by cosine similarity in the same SAE
     */
    async utilSaeTopkByDecoderCossimPostRaw(requestParameters: UtilSaeTopkByDecoderCossimPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UtilSaeTopkByDecoderCossimPost200Response>> {
        if (requestParameters['utilSaeTopkByDecoderCossimPostRequest'] == null) {
            throw new runtime.RequiredError(
                'utilSaeTopkByDecoderCossimPostRequest',
                'Required parameter "utilSaeTopkByDecoderCossimPostRequest" was null or undefined when calling utilSaeTopkByDecoderCossimPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/util/sae-topk-by-decoder-cossim`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UtilSaeTopkByDecoderCossimPostRequestToJSON(requestParameters['utilSaeTopkByDecoderCossimPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UtilSaeTopkByDecoderCossimPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Given a specific vector or SAE feature, return the top features by cosine similarity in the same SAE
     */
    async utilSaeTopkByDecoderCossimPost(requestParameters: UtilSaeTopkByDecoderCossimPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UtilSaeTopkByDecoderCossimPost200Response> {
        const response = await this.utilSaeTopkByDecoderCossimPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the raw vector for an SAE feature
     */
    async utilSaeVectorPostRaw(requestParameters: UtilSaeVectorPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UtilSaeVectorPost200Response>> {
        if (requestParameters['utilSaeVectorPostRequest'] == null) {
            throw new runtime.RequiredError(
                'utilSaeVectorPostRequest',
                'Required parameter "utilSaeVectorPostRequest" was null or undefined when calling utilSaeVectorPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-SECRET-KEY"] = await this.configuration.apiKey("X-SECRET-KEY"); // SimpleSecretAuth authentication
        }

        const response = await this.request({
            path: `/util/sae-vector`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UtilSaeVectorPostRequestToJSON(requestParameters['utilSaeVectorPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UtilSaeVectorPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the raw vector for an SAE feature
     */
    async utilSaeVectorPost(requestParameters: UtilSaeVectorPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UtilSaeVectorPost200Response> {
        const response = await this.utilSaeVectorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
