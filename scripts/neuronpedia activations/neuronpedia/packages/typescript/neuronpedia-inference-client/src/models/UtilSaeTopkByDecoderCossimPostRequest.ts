/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NPFeature } from './NPFeature';
import {
    NPFeatureFromJSON,
    NPFeatureFromJSONTyped,
    NPFeatureToJSON,
    NPFeatureToJSONTyped,
} from './NPFeature';

/**
 * 
 * @export
 * @interface UtilSaeTopkByDecoderCossimPostRequest
 */
export interface UtilSaeTopkByDecoderCossimPostRequest {
    /**
     * 
     * @type {NPFeature}
     * @memberof UtilSaeTopkByDecoderCossimPostRequest
     */
    feature?: NPFeature;
    /**
     * Custom vector to find the top features by cossim for.
     * @type {Array<number>}
     * @memberof UtilSaeTopkByDecoderCossimPostRequest
     */
    vector?: Array<number>;
    /**
     * Model to compare the vector or feature against.
     * @type {string}
     * @memberof UtilSaeTopkByDecoderCossimPostRequest
     */
    model: string;
    /**
     * Source/SAE ID to compare the vector or feature against.
     * @type {string}
     * @memberof UtilSaeTopkByDecoderCossimPostRequest
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof UtilSaeTopkByDecoderCossimPostRequest
     */
    numResults: number;
}

/**
 * Check if a given object implements the UtilSaeTopkByDecoderCossimPostRequest interface.
 */
export function instanceOfUtilSaeTopkByDecoderCossimPostRequest(value: object): value is UtilSaeTopkByDecoderCossimPostRequest {
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('numResults' in value) || value['numResults'] === undefined) return false;
    return true;
}

export function UtilSaeTopkByDecoderCossimPostRequestFromJSON(json: any): UtilSaeTopkByDecoderCossimPostRequest {
    return UtilSaeTopkByDecoderCossimPostRequestFromJSONTyped(json, false);
}

export function UtilSaeTopkByDecoderCossimPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UtilSaeTopkByDecoderCossimPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'feature': json['feature'] == null ? undefined : NPFeatureFromJSON(json['feature']),
        'vector': json['vector'] == null ? undefined : json['vector'],
        'model': json['model'],
        'source': json['source'],
        'numResults': json['num_results'],
    };
}

export function UtilSaeTopkByDecoderCossimPostRequestToJSON(json: any): UtilSaeTopkByDecoderCossimPostRequest {
    return UtilSaeTopkByDecoderCossimPostRequestToJSONTyped(json, false);
}

export function UtilSaeTopkByDecoderCossimPostRequestToJSONTyped(value?: UtilSaeTopkByDecoderCossimPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'feature': NPFeatureToJSON(value['feature']),
        'vector': value['vector'],
        'model': value['model'],
        'source': value['source'],
        'num_results': value['numResults'],
    };
}

