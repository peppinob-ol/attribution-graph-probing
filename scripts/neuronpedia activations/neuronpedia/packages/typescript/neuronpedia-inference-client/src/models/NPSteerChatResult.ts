/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NPSteerChatMessage } from './NPSteerChatMessage';
import {
    NPSteerChatMessageFromJSON,
    NPSteerChatMessageFromJSONTyped,
    NPSteerChatMessageToJSON,
    NPSteerChatMessageToJSONTyped,
} from './NPSteerChatMessage';
import type { NPLogprob } from './NPLogprob';
import {
    NPLogprobFromJSON,
    NPLogprobFromJSONTyped,
    NPLogprobToJSON,
    NPLogprobToJSONTyped,
} from './NPLogprob';
import type { NPSteerType } from './NPSteerType';
import {
    NPSteerTypeFromJSON,
    NPSteerTypeFromJSONTyped,
    NPSteerTypeToJSON,
    NPSteerTypeToJSONTyped,
} from './NPSteerType';

/**
 * The formatted and unformatted ("raw") chat messages
 * @export
 * @interface NPSteerChatResult
 */
export interface NPSteerChatResult {
    /**
     * 
     * @type {Array<NPSteerChatMessage>}
     * @memberof NPSteerChatResult
     */
    chatTemplate: Array<NPSteerChatMessage>;
    /**
     * 
     * @type {string}
     * @memberof NPSteerChatResult
     */
    raw: string;
    /**
     * 
     * @type {NPSteerType}
     * @memberof NPSteerChatResult
     */
    type?: NPSteerType;
    /**
     * Token logprobs for the output sequence. Only present if n_logprobs > 0.
     * @type {Array<NPLogprob>}
     * @memberof NPSteerChatResult
     */
    logprobs?: Array<NPLogprob>;
}



/**
 * Check if a given object implements the NPSteerChatResult interface.
 */
export function instanceOfNPSteerChatResult(value: object): value is NPSteerChatResult {
    if (!('chatTemplate' in value) || value['chatTemplate'] === undefined) return false;
    if (!('raw' in value) || value['raw'] === undefined) return false;
    return true;
}

export function NPSteerChatResultFromJSON(json: any): NPSteerChatResult {
    return NPSteerChatResultFromJSONTyped(json, false);
}

export function NPSteerChatResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): NPSteerChatResult {
    if (json == null) {
        return json;
    }
    return {
        
        'chatTemplate': ((json['chat_template'] as Array<any>).map(NPSteerChatMessageFromJSON)),
        'raw': json['raw'],
        'type': json['type'] == null ? undefined : NPSteerTypeFromJSON(json['type']),
        'logprobs': json['logprobs'] == null ? undefined : ((json['logprobs'] as Array<any>).map(NPLogprobFromJSON)),
    };
}

export function NPSteerChatResultToJSON(json: any): NPSteerChatResult {
    return NPSteerChatResultToJSONTyped(json, false);
}

export function NPSteerChatResultToJSONTyped(value?: NPSteerChatResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chat_template': ((value['chatTemplate'] as Array<any>).map(NPSteerChatMessageToJSON)),
        'raw': value['raw'],
        'type': NPSteerTypeToJSON(value['type']),
        'logprobs': value['logprobs'] == null ? undefined : ((value['logprobs'] as Array<any>).map(NPLogprobToJSON)),
    };
}

