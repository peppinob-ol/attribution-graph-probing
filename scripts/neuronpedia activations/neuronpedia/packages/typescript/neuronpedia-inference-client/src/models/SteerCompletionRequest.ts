/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NPSteerMethod } from './NPSteerMethod';
import {
    NPSteerMethodFromJSON,
    NPSteerMethodFromJSONTyped,
    NPSteerMethodToJSON,
    NPSteerMethodToJSONTyped,
} from './NPSteerMethod';
import type { NPSteerVector } from './NPSteerVector';
import {
    NPSteerVectorFromJSON,
    NPSteerVectorFromJSONTyped,
    NPSteerVectorToJSON,
    NPSteerVectorToJSONTyped,
} from './NPSteerVector';
import type { NPSteerFeature } from './NPSteerFeature';
import {
    NPSteerFeatureFromJSON,
    NPSteerFeatureFromJSONTyped,
    NPSteerFeatureToJSON,
    NPSteerFeatureToJSONTyped,
} from './NPSteerFeature';
import type { NPSteerType } from './NPSteerType';
import {
    NPSteerTypeFromJSON,
    NPSteerTypeFromJSONTyped,
    NPSteerTypeToJSON,
    NPSteerTypeToJSONTyped,
} from './NPSteerType';

/**
 * Base request for steering
 * @export
 * @interface SteerCompletionRequest
 */
export interface SteerCompletionRequest {
    /**
     * Text to pass the model for completion
     * @type {string}
     * @memberof SteerCompletionRequest
     */
    prompt: string;
    /**
     * Name of the model
     * @type {string}
     * @memberof SteerCompletionRequest
     */
    model: string;
    /**
     * 
     * @type {NPSteerMethod}
     * @memberof SteerCompletionRequest
     */
    steerMethod: NPSteerMethod;
    /**
     * 
     * @type {boolean}
     * @memberof SteerCompletionRequest
     */
    normalizeSteering: boolean;
    /**
     * Array that specifies whether or not to generate STEERED output, DEFAULT (non-steered) output, or both.
     * @type {Array<NPSteerType>}
     * @memberof SteerCompletionRequest
     */
    types: Array<NPSteerType>;
    /**
     * Features to steer towards or away from
     * @type {Array<NPSteerFeature>}
     * @memberof SteerCompletionRequest
     */
    features?: Array<NPSteerFeature>;
    /**
     * 
     * @type {Array<NPSteerVector>}
     * @memberof SteerCompletionRequest
     */
    vectors?: Array<NPSteerVector>;
    /**
     * Number of completion tokens to generate
     * @type {number}
     * @memberof SteerCompletionRequest
     */
    nCompletionTokens: number;
    /**
     * 
     * @type {number}
     * @memberof SteerCompletionRequest
     */
    temperature: number;
    /**
     * The steering strength will be multiplied by this number
     * @type {number}
     * @memberof SteerCompletionRequest
     */
    strengthMultiplier: number;
    /**
     * 
     * @type {number}
     * @memberof SteerCompletionRequest
     */
    freqPenalty: number;
    /**
     * 
     * @type {number}
     * @memberof SteerCompletionRequest
     */
    seed: number;
    /**
     * Whether or not to stream responses using Server Side Events (SSE). Note that the OpenAPI spec does not support SSE - you will receive multiple responses with the same format as non-streaming, except with the "output" field chunked.
     * @type {boolean}
     * @memberof SteerCompletionRequest
     */
    stream?: boolean;
    /**
     * Number of logprobs to return per token. 0 means no logprobs.
     * @type {number}
     * @memberof SteerCompletionRequest
     */
    nLogprobs?: number;
}



/**
 * Check if a given object implements the SteerCompletionRequest interface.
 */
export function instanceOfSteerCompletionRequest(value: object): value is SteerCompletionRequest {
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('steerMethod' in value) || value['steerMethod'] === undefined) return false;
    if (!('normalizeSteering' in value) || value['normalizeSteering'] === undefined) return false;
    if (!('types' in value) || value['types'] === undefined) return false;
    if (!('nCompletionTokens' in value) || value['nCompletionTokens'] === undefined) return false;
    if (!('temperature' in value) || value['temperature'] === undefined) return false;
    if (!('strengthMultiplier' in value) || value['strengthMultiplier'] === undefined) return false;
    if (!('freqPenalty' in value) || value['freqPenalty'] === undefined) return false;
    if (!('seed' in value) || value['seed'] === undefined) return false;
    return true;
}

export function SteerCompletionRequestFromJSON(json: any): SteerCompletionRequest {
    return SteerCompletionRequestFromJSONTyped(json, false);
}

export function SteerCompletionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SteerCompletionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'prompt': json['prompt'],
        'model': json['model'],
        'steerMethod': NPSteerMethodFromJSON(json['steer_method']),
        'normalizeSteering': json['normalize_steering'],
        'types': ((json['types'] as Array<any>).map(NPSteerTypeFromJSON)),
        'features': json['features'] == null ? undefined : ((json['features'] as Array<any>).map(NPSteerFeatureFromJSON)),
        'vectors': json['vectors'] == null ? undefined : ((json['vectors'] as Array<any>).map(NPSteerVectorFromJSON)),
        'nCompletionTokens': json['n_completion_tokens'],
        'temperature': json['temperature'],
        'strengthMultiplier': json['strength_multiplier'],
        'freqPenalty': json['freq_penalty'],
        'seed': json['seed'],
        'stream': json['stream'] == null ? undefined : json['stream'],
        'nLogprobs': json['n_logprobs'] == null ? undefined : json['n_logprobs'],
    };
}

export function SteerCompletionRequestToJSON(json: any): SteerCompletionRequest {
    return SteerCompletionRequestToJSONTyped(json, false);
}

export function SteerCompletionRequestToJSONTyped(value?: SteerCompletionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'prompt': value['prompt'],
        'model': value['model'],
        'steer_method': NPSteerMethodToJSON(value['steerMethod']),
        'normalize_steering': value['normalizeSteering'],
        'types': ((value['types'] as Array<any>).map(NPSteerTypeToJSON)),
        'features': value['features'] == null ? undefined : ((value['features'] as Array<any>).map(NPSteerFeatureToJSON)),
        'vectors': value['vectors'] == null ? undefined : ((value['vectors'] as Array<any>).map(NPSteerVectorToJSON)),
        'n_completion_tokens': value['nCompletionTokens'],
        'temperature': value['temperature'],
        'strength_multiplier': value['strengthMultiplier'],
        'freq_penalty': value['freqPenalty'],
        'seed': value['seed'],
        'stream': value['stream'],
        'n_logprobs': value['nLogprobs'],
    };
}

