/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * For a given prompt, get the top activating features for a set of SAEs (eg gemmascope-res-65k), or specific SAEs in the set of SAEs (eg 0-gemmascope-res-65k, 5-gemmascope-res-65k). Also has other customization options.
 * @export
 * @interface ActivationAllPostRequest
 */
export interface ActivationAllPostRequest {
    /**
     * Input text prompt to get activations for
     * @type {string}
     * @memberof ActivationAllPostRequest
     */
    prompt: string;
    /**
     * Name of the model to test activations on
     * @type {string}
     * @memberof ActivationAllPostRequest
     */
    model: string;
    /**
     * The source set name of the SAEs (eg gemmascope-res-16k)
     * @type {string}
     * @memberof ActivationAllPostRequest
     */
    sourceSet: string;
    /**
     * List of specific SAEs to get activations for (eg ["0-gemmascope-res-65k", "5-gemmascope-res-65k"]). If not specified, will get activations for all SAEs in the source set.
     * @type {Array<string>}
     * @memberof ActivationAllPostRequest
     */
    selectedSources: Array<string>;
    /**
     * Sort the results by the sum of the activations at the specified token indexes.
     * @type {Array<number>}
     * @memberof ActivationAllPostRequest
     */
    sortByTokenIndexes: Array<number>;
    /**
     * Whether or not to include features whose highest activation value is the BOS token.
     * @type {boolean}
     * @memberof ActivationAllPostRequest
     */
    ignoreBos: boolean;
    /**
     * Optional. If specified, will only return features that match the indexes specified. Can only be used if we're testing just one SAE ("selected_sources" length = 1).
     * @type {Array<number>}
     * @memberof ActivationAllPostRequest
     */
    featureFilter?: Array<number>;
    /**
     * Optional. The number of top features to return.
     * @type {number}
     * @memberof ActivationAllPostRequest
     */
    numResults?: number;
}

/**
 * Check if a given object implements the ActivationAllPostRequest interface.
 */
export function instanceOfActivationAllPostRequest(value: object): value is ActivationAllPostRequest {
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('sourceSet' in value) || value['sourceSet'] === undefined) return false;
    if (!('selectedSources' in value) || value['selectedSources'] === undefined) return false;
    if (!('sortByTokenIndexes' in value) || value['sortByTokenIndexes'] === undefined) return false;
    if (!('ignoreBos' in value) || value['ignoreBos'] === undefined) return false;
    return true;
}

export function ActivationAllPostRequestFromJSON(json: any): ActivationAllPostRequest {
    return ActivationAllPostRequestFromJSONTyped(json, false);
}

export function ActivationAllPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivationAllPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'prompt': json['prompt'],
        'model': json['model'],
        'sourceSet': json['source_set'],
        'selectedSources': json['selected_sources'],
        'sortByTokenIndexes': json['sort_by_token_indexes'],
        'ignoreBos': json['ignore_bos'],
        'featureFilter': json['feature_filter'] == null ? undefined : json['feature_filter'],
        'numResults': json['num_results'] == null ? undefined : json['num_results'],
    };
}

export function ActivationAllPostRequestToJSON(json: any): ActivationAllPostRequest {
    return ActivationAllPostRequestToJSONTyped(json, false);
}

export function ActivationAllPostRequestToJSONTyped(value?: ActivationAllPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'prompt': value['prompt'],
        'model': value['model'],
        'source_set': value['sourceSet'],
        'selected_sources': value['selectedSources'],
        'sort_by_token_indexes': value['sortByTokenIndexes'],
        'ignore_bos': value['ignoreBos'],
        'feature_filter': value['featureFilter'],
        'num_results': value['numResults'],
    };
}

