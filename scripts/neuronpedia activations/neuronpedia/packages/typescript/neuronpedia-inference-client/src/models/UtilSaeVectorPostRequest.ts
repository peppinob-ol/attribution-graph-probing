/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Get the raw vector for an SAE feature
 * @export
 * @interface UtilSaeVectorPostRequest
 */
export interface UtilSaeVectorPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UtilSaeVectorPostRequest
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof UtilSaeVectorPostRequest
     */
    source: string;
    /**
     * 
     * @type {number}
     * @memberof UtilSaeVectorPostRequest
     */
    index: number;
}

/**
 * Check if a given object implements the UtilSaeVectorPostRequest interface.
 */
export function instanceOfUtilSaeVectorPostRequest(value: object): value is UtilSaeVectorPostRequest {
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('index' in value) || value['index'] === undefined) return false;
    return true;
}

export function UtilSaeVectorPostRequestFromJSON(json: any): UtilSaeVectorPostRequest {
    return UtilSaeVectorPostRequestFromJSONTyped(json, false);
}

export function UtilSaeVectorPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UtilSaeVectorPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'model': json['model'],
        'source': json['source'],
        'index': json['index'],
    };
}

export function UtilSaeVectorPostRequestToJSON(json: any): UtilSaeVectorPostRequest {
    return UtilSaeVectorPostRequestToJSONTyped(json, false);
}

export function UtilSaeVectorPostRequestToJSONTyped(value?: UtilSaeVectorPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'model': value['model'],
        'source': value['source'],
        'index': value['index'],
    };
}

