/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Get activations for either a specific feature in an SAE (specified by "source" + "index") or a custom vector (specified by "vector" + "hook")
 * @export
 * @interface ActivationSinglePostRequest
 */
export interface ActivationSinglePostRequest {
    /**
     * Input text prompt to get activations for
     * @type {string}
     * @memberof ActivationSinglePostRequest
     */
    prompt: string;
    /**
     * Name of the model to test activations on
     * @type {string}
     * @memberof ActivationSinglePostRequest
     */
    model: string;
    /**
     * Source identifier - could be an SAE ID (eg 5-gemmascope-res-16k). Must be specified with "index", or not at all.
     * @type {string}
     * @memberof ActivationSinglePostRequest
     */
    source?: string;
    /**
     * Index of the SAE. Must be specified with "source", or not at all.
     * @type {string}
     * @memberof ActivationSinglePostRequest
     */
    index?: string;
    /**
     * Custom vector to test activations. Must be specified with "hook".
     * @type {Array<number>}
     * @memberof ActivationSinglePostRequest
     */
    vector?: Array<number>;
    /**
     * Hook that the custom vector applies to. Must be specified with "vector".
     * @type {string}
     * @memberof ActivationSinglePostRequest
     */
    hook?: string;
}

/**
 * Check if a given object implements the ActivationSinglePostRequest interface.
 */
export function instanceOfActivationSinglePostRequest(value: object): value is ActivationSinglePostRequest {
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    return true;
}

export function ActivationSinglePostRequestFromJSON(json: any): ActivationSinglePostRequest {
    return ActivationSinglePostRequestFromJSONTyped(json, false);
}

export function ActivationSinglePostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivationSinglePostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'prompt': json['prompt'],
        'model': json['model'],
        'source': json['source'] == null ? undefined : json['source'],
        'index': json['index'] == null ? undefined : json['index'],
        'vector': json['vector'] == null ? undefined : json['vector'],
        'hook': json['hook'] == null ? undefined : json['hook'],
    };
}

export function ActivationSinglePostRequestToJSON(json: any): ActivationSinglePostRequest {
    return ActivationSinglePostRequestToJSONTyped(json, false);
}

export function ActivationSinglePostRequestToJSONTyped(value?: ActivationSinglePostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'prompt': value['prompt'],
        'model': value['model'],
        'source': value['source'],
        'index': value['index'],
        'vector': value['vector'],
        'hook': value['hook'],
    };
}

