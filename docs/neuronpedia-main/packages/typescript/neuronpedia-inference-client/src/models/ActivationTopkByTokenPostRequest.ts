/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Get activations for either a specific feature in an SAE (specified by "source" + "index") or a custom vector (specified by "vector" + "hook")
 * @export
 * @interface ActivationTopkByTokenPostRequest
 */
export interface ActivationTopkByTokenPostRequest {
    /**
     * Input text prompt to get activations for
     * @type {string}
     * @memberof ActivationTopkByTokenPostRequest
     */
    prompt: string;
    /**
     * Name of the model to test activations on
     * @type {string}
     * @memberof ActivationTopkByTokenPostRequest
     */
    model: string;
    /**
     * Source identifier - could be an SAE ID (eg 5-gemmascope-res-16k). Must be specified with "index", or not at NPActivationAllRequest.
     * @type {string}
     * @memberof ActivationTopkByTokenPostRequest
     */
    source: string;
    /**
     * The number of features to include for each token position.
     * @type {number}
     * @memberof ActivationTopkByTokenPostRequest
     */
    topK?: number;
    /**
     * Whether or not to include features whose highest activation value is the BOS token.
     * @type {boolean}
     * @memberof ActivationTopkByTokenPostRequest
     */
    ignoreBos: boolean;
}

/**
 * Check if a given object implements the ActivationTopkByTokenPostRequest interface.
 */
export function instanceOfActivationTopkByTokenPostRequest(value: object): value is ActivationTopkByTokenPostRequest {
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('ignoreBos' in value) || value['ignoreBos'] === undefined) return false;
    return true;
}

export function ActivationTopkByTokenPostRequestFromJSON(json: any): ActivationTopkByTokenPostRequest {
    return ActivationTopkByTokenPostRequestFromJSONTyped(json, false);
}

export function ActivationTopkByTokenPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivationTopkByTokenPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'prompt': json['prompt'],
        'model': json['model'],
        'source': json['source'],
        'topK': json['top_k'] == null ? undefined : json['top_k'],
        'ignoreBos': json['ignore_bos'],
    };
}

export function ActivationTopkByTokenPostRequestToJSON(json: any): ActivationTopkByTokenPostRequest {
    return ActivationTopkByTokenPostRequestToJSONTyped(json, false);
}

export function ActivationTopkByTokenPostRequestToJSONTyped(value?: ActivationTopkByTokenPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'prompt': value['prompt'],
        'model': value['model'],
        'source': value['source'],
        'top_k': value['topK'],
        'ignore_bos': value['ignoreBos'],
    };
}

