/* tslint:disable */
/* eslint-disable */
/**
 * Neuronpedia - Inference Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: johnny@neuronpedia.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NPLogprobTop } from './NPLogprobTop';
import {
    NPLogprobTopFromJSON,
    NPLogprobTopFromJSONTyped,
    NPLogprobTopToJSON,
    NPLogprobTopToJSONTyped,
} from './NPLogprobTop';

/**
 * Logprobs for a single token
 * @export
 * @interface NPLogprob
 */
export interface NPLogprob {
    /**
     * The chosen token
     * @type {string}
     * @memberof NPLogprob
     */
    token: string;
    /**
     * The log probability of the chosen token
     * @type {number}
     * @memberof NPLogprob
     */
    logprob: number;
    /**
     * Top candidate tokens and their log probabilities
     * @type {Array<NPLogprobTop>}
     * @memberof NPLogprob
     */
    topLogprobs: Array<NPLogprobTop>;
}

/**
 * Check if a given object implements the NPLogprob interface.
 */
export function instanceOfNPLogprob(value: object): value is NPLogprob {
    if (!('token' in value) || value['token'] === undefined) return false;
    if (!('logprob' in value) || value['logprob'] === undefined) return false;
    if (!('topLogprobs' in value) || value['topLogprobs'] === undefined) return false;
    return true;
}

export function NPLogprobFromJSON(json: any): NPLogprob {
    return NPLogprobFromJSONTyped(json, false);
}

export function NPLogprobFromJSONTyped(json: any, ignoreDiscriminator: boolean): NPLogprob {
    if (json == null) {
        return json;
    }
    return {
        
        'token': json['token'],
        'logprob': json['logprob'],
        'topLogprobs': ((json['top_logprobs'] as Array<any>).map(NPLogprobTopFromJSON)),
    };
}

export function NPLogprobToJSON(json: any): NPLogprob {
    return NPLogprobToJSONTyped(json, false);
}

export function NPLogprobToJSONTyped(value?: NPLogprob | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'token': value['token'],
        'logprob': value['logprob'],
        'top_logprobs': ((value['topLogprobs'] as Array<any>).map(NPLogprobTopToJSON)),
    };
}

